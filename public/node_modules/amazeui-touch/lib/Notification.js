'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _reactTransitionGroup = require('react-transition-group');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _ClassNameMixin = require('./mixins/ClassNameMixin');

var _ClassNameMixin2 = _interopRequireDefault(_ClassNameMixin);

var _exenv = require('./utils/exenv');

var _bodyElement = require('./utils/bodyElement');

var _bodyElement2 = _interopRequireDefault(_bodyElement);

var _Icon = require('./Icon');

var _Icon2 = _interopRequireDefault(_Icon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

// @see https://facebook.github.io/react/blog/2015/09/10/react-v0.14-rc1.html
// To improve reliability, CSSTransitionGroup will no longer listen to
// transition events. Instead, you should specify transition durations
// manually using props such as `transitionEnterTimeout={500}`.
// NOTE: It should less than CSS animation duration, if not, the animation
// be not smooth. It maybe a bug of React.
var TRANSITION_TIMEOUT = 250;

var Notification = (0, _createReactClass2.default)({
  displayName: 'Notification',
  mixins: [_ClassNameMixin2.default],

  propTypes: {
    classPrefix: _propTypes2.default.string.isRequired,
    title: _propTypes2.default.string,
    amStyle: _propTypes2.default.string,
    closeBtn: _propTypes2.default.bool,
    animated: _propTypes2.default.bool,
    visible: _propTypes2.default.bool,
    onDismiss: _propTypes2.default.func
  },

  getDefaultProps: function getDefaultProps() {
    return {
      classPrefix: 'notification',
      closeBtn: true,
      onDismiss: function onDismiss() {}
    };
  },
  renderCloseBtn: function renderCloseBtn() {
    return this.props.closeBtn ? _react2.default.createElement(_Icon2.default, {
      className: this.prefixClass('icon'),
      name: 'close',
      onClick: this.props.onDismiss
    }) : null;
  },
  render: function render() {
    var classSet = this.getClassSet();

    var _props = this.props,
        title = _props.title,
        className = _props.className,
        animated = _props.animated,
        visible = _props.visible,
        props = _objectWithoutProperties(_props, ['title', 'className', 'animated', 'visible']);

    delete props.classPrefix;
    delete props.amStyle;
    delete props.static;
    delete props.closeBtn;
    delete props.onDismiss;

    classSet[this.prefixClass('animated')] = animated;

    var notificationBar = visible ? _react2.default.createElement(
      'div',
      _extends({}, props, {
        className: (0, _classnames2.default)(classSet, className),
        key: 'notification'
      }),
      _react2.default.createElement(
        'div',
        { className: this.prefixClass('content') },
        title ? _react2.default.createElement(
          'h3',
          { className: this.prefixClass('title') },
          title
        ) : null,
        this.props.children
      ),
      this.renderCloseBtn()
    ) : null;

    return animated ? _react2.default.createElement(
      _reactTransitionGroup.CSSTransitionGroup,
      {
        component: 'div',
        transitionName: 'notification',
        transitionEnterTimeout: TRANSITION_TIMEOUT,
        transitionLeaveTimeout: TRANSITION_TIMEOUT
      },
      notificationBar
    ) : notificationBar;
  }
});

var NotificationPortal = function (_React$Component) {
  _inherits(NotificationPortal, _React$Component);

  function NotificationPortal() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, NotificationPortal);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = NotificationPortal.__proto__ || Object.getPrototypeOf(NotificationPortal)).call.apply(_ref, [this].concat(args))), _this), _this.isStatic = function () {
      return _this.props.static;
    }, _this.renderNotification = function (props) {
      _this.portal = (0, _reactDom.unstable_renderSubtreeIntoContainer)(_this, _react2.default.createElement(Notification, props), _this.node);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(NotificationPortal, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (!this.isStatic()) {
        this.node = document.createElement('div');
        this.node.className = '__notification-portal';
        _bodyElement2.default.appendChild(this.node);
        this.renderNotification(this.props);
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (!this.isStatic()) {
        this.renderNotification(nextProps);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (!this.isStatic()) {
        (0, _reactDom.unmountComponentAtNode)(this.node);
        _bodyElement2.default.removeChild(this.node);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return this.isStatic() ? _react2.default.createElement(Notification, this.props) : null;
    }
  }]);

  return NotificationPortal;
}(_react2.default.Component);

NotificationPortal.propTypes = {
  visible: _propTypes2.default.bool.isRequired
};
NotificationPortal.defaultProps = {
  visible: false
};
exports.default = NotificationPortal;
module.exports = exports['default'];